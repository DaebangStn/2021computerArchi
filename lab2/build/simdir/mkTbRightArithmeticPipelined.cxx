/*
 * Generated by Bluespec Compiler (build d05342e3)
 * 
 * On Thu Apr 29 09:13:08 KST 2021
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRightArithmeticPipelined.h"
#include "imported_BDPI_functions.h"


/* Literal declarations */
static unsigned int const UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									 2863311530u,
									 42u };
static tUWide const UWide_literal_72_h2aaaaaaaaaaaaaaaaa(72u,
							 UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_2("FAILED %d correct values out of %d", 34u);
static std::string const __str_literal_3("FAILED Right Arithmetic Shift %b >> %d gave %b instead of %b",
					 60u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRightArithmeticPipelined::MOD_mkTbRightArithmeticPipelined(tSimStateHdl simHdl,
								   char const *name,
								   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_bsrap_bsrp_inFifo(simHdl, "bsrap_bsrp_inFifo", this, 71u, 2u, (tUInt8)1u, 0u),
    INST_bsrap_bsrp_outFifo(simHdl, "bsrap_bsrp_outFifo", this, 64u, 2u, (tUInt8)1u, 0u),
    INST_bsrap_bsrp_reg0(simHdl,
			 "bsrap_bsrp_reg0",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_bsrap_bsrp_reg1(simHdl,
			 "bsrap_bsrp_reg1",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_bsrap_bsrp_reg2(simHdl,
			 "bsrap_bsrp_reg2",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_bsrap_bsrp_reg3(simHdl,
			 "bsrap_bsrp_reg3",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_bsrap_bsrp_reg4(simHdl,
			 "bsrap_bsrp_reg4",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_correct(simHdl, "correct", this, 32u, 0u, (tUInt8)0u),
    INST_input_cycle(simHdl, "input_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_output_cycle(simHdl, "output_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_randomShift_init(simHdl, "randomShift_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal_init(simHdl, "randomVal_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_valFifo(simHdl, "valFifo", this, 70u, 10u, (tUInt8)1u, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_bsrap_bsrp_reg4___d5(72u),
    DEF_x__h5090(12297829382473034410llu),
    DEF_TASK_getRandom___d83(12297829382473034410llu),
    DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86(70u),
    DEF_bsrap_bsrp_reg3___d53(72u),
    DEF_bsrap_bsrp_reg2___d42(72u),
    DEF_bsrap_bsrp_reg1___d31(72u),
    DEF_bsrap_bsrp_reg0___d20(72u),
    DEF_bsrap_bsrp_inFifo_first____d11(71u),
    DEF_valFifo_first____d103(70u),
    DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63(72u),
    DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52(72u),
    DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41(72u),
    DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30(72u),
    DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19(72u),
    DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88(71u)
{
  symbol_count = 20u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRightArithmeticPipelined::init_symbols_0()
{
  init_symbol(&symbols[0u], "bsrap_bsrp_inFifo", SYM_MODULE, &INST_bsrap_bsrp_inFifo);
  init_symbol(&symbols[1u], "bsrap_bsrp_outFifo", SYM_MODULE, &INST_bsrap_bsrp_outFifo);
  init_symbol(&symbols[2u], "bsrap_bsrp_reg0", SYM_MODULE, &INST_bsrap_bsrp_reg0);
  init_symbol(&symbols[3u], "bsrap_bsrp_reg1", SYM_MODULE, &INST_bsrap_bsrp_reg1);
  init_symbol(&symbols[4u], "bsrap_bsrp_reg2", SYM_MODULE, &INST_bsrap_bsrp_reg2);
  init_symbol(&symbols[5u], "bsrap_bsrp_reg3", SYM_MODULE, &INST_bsrap_bsrp_reg3);
  init_symbol(&symbols[6u], "bsrap_bsrp_reg4", SYM_MODULE, &INST_bsrap_bsrp_reg4);
  init_symbol(&symbols[7u], "correct", SYM_MODULE, &INST_correct);
  init_symbol(&symbols[8u], "input_cycle", SYM_MODULE, &INST_input_cycle);
  init_symbol(&symbols[9u], "output_cycle", SYM_MODULE, &INST_output_cycle);
  init_symbol(&symbols[10u], "RL_bsrap_bsrp_shift", SYM_RULE);
  init_symbol(&symbols[11u], "RL_randomShift_initialize", SYM_RULE);
  init_symbol(&symbols[12u], "RL_randomVal_initialize", SYM_RULE);
  init_symbol(&symbols[13u], "RL_test_request", SYM_RULE);
  init_symbol(&symbols[14u], "RL_test_response", SYM_RULE);
  init_symbol(&symbols[15u], "randomShift_init", SYM_MODULE, &INST_randomShift_init);
  init_symbol(&symbols[16u], "randomVal_init", SYM_MODULE, &INST_randomVal_init);
  init_symbol(&symbols[17u], "valFifo", SYM_MODULE, &INST_valFifo);
  init_symbol(&symbols[18u], "x__h5312", SYM_DEF, &DEF_x__h5312, 32u);
  init_symbol(&symbols[19u], "x__h5668", SYM_DEF, &DEF_x__h5668, 32u);
}


/* Rule actions */

void MOD_mkTbRightArithmeticPipelined::RL_bsrap_bsrp_shift()
{
  tUInt64 DEF_x__h853;
  tUInt64 DEF_x__h536;
  tUInt64 DEF_x__h1181;
  tUInt64 DEF_x__h1594;
  tUInt64 DEF_x__h2175;
  tUInt64 DEF_result__h3034;
  tUInt64 DEF_result__h491;
  tUInt64 DEF_result__h3032;
  tUInt64 DEF_result__h815;
  tUInt64 DEF_result__h1143;
  tUInt64 DEF_result__h1556;
  tUInt64 DEF_result__h2137;
  DEF_bsrap_bsrp_reg4___d5 = INST_bsrap_bsrp_reg4.METH_read();
  DEF_result__h3032 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg4___d5, 32u, 70u, 32u, 7u);
  DEF_result__h3034 = DEF_bsrap_bsrp_reg4___d5.get_bits_in_word8(0u,
								 6u,
								 1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg4___d5.get_bits_in_word8(0u,
															      0u,
															      1u) ? 4294967295u : 0u)) << 32u) | (tUInt64)(primExtract32(32u,
																							 72u,
																							 DEF_bsrap_bsrp_reg4___d5,
																							 32u,
																							 70u,
																							 32u,
																							 39u)) : DEF_result__h3032;
  DEF_bsrap_bsrp_reg3___d53 = INST_bsrap_bsrp_reg3.METH_read();
  DEF_result__h2137 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg3___d53, 32u, 70u, 32u, 7u);
  DEF_x__h2175 = DEF_bsrap_bsrp_reg3___d53.get_bits_in_word8(0u,
							     5u,
							     1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg3___d53.get_bits_in_word8(0u,
															   0u,
															   1u) ? 65535u : 0u)) << 48u) | primExtract64(48u,
																				       72u,
																				       DEF_bsrap_bsrp_reg3___d53,
																				       32u,
																				       70u,
																				       32u,
																				       23u) : DEF_result__h2137;
  DEF_bsrap_bsrp_reg2___d42 = INST_bsrap_bsrp_reg2.METH_read();
  DEF_result__h1556 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg2___d42, 32u, 70u, 32u, 7u);
  DEF_x__h1594 = DEF_bsrap_bsrp_reg2___d42.get_bits_in_word8(0u,
							     4u,
							     1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg2___d42.get_bits_in_word8(0u,
															   0u,
															   1u) ? (tUInt8)255u : (tUInt8)0u)) << 56u) | primExtract64(56u,
																						     72u,
																						     DEF_bsrap_bsrp_reg2___d42,
																						     32u,
																						     70u,
																						     32u,
																						     15u) : DEF_result__h1556;
  DEF_bsrap_bsrp_reg0___d20 = INST_bsrap_bsrp_reg0.METH_read();
  DEF_result__h815 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg0___d20, 32u, 70u, 32u, 7u);
  DEF_x__h853 = DEF_bsrap_bsrp_reg0___d20.get_bits_in_word8(0u,
							    2u,
							    1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg0___d20.get_bits_in_word8(0u,
															  0u,
															  1u) ? (tUInt8)3u : (tUInt8)0u)) << 62u) | primExtract64(62u,
																						  72u,
																						  DEF_bsrap_bsrp_reg0___d20,
																						  32u,
																						  70u,
																						  32u,
																						  9u) : DEF_result__h815;
  DEF_bsrap_bsrp_reg1___d31 = INST_bsrap_bsrp_reg1.METH_read();
  DEF_result__h1143 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg1___d31, 32u, 70u, 32u, 7u);
  DEF_x__h1181 = DEF_bsrap_bsrp_reg1___d31.get_bits_in_word8(0u,
							     3u,
							     1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg1___d31.get_bits_in_word8(0u,
															   0u,
															   1u) ? (tUInt8)15u : (tUInt8)0u)) << 60u) | primExtract64(60u,
																						    72u,
																						    DEF_bsrap_bsrp_reg1___d31,
																						    32u,
																						    70u,
																						    32u,
																						    11u) : DEF_result__h1143;
  DEF_bsrap_bsrp_inFifo_first____d11 = INST_bsrap_bsrp_inFifo.METH_first();
  DEF_result__h491 = primExtract64(64u, 71u, DEF_bsrap_bsrp_inFifo_first____d11, 32u, 70u, 32u, 7u);
  DEF_x__h536 = DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
								     1u,
								     1u) ? (((tUInt64)(DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
																	    0u,
																	    1u))) << 63u) | primExtract64(63u,
																					  71u,
																					  DEF_bsrap_bsrp_inFifo_first____d11,
																					  32u,
																					  70u,
																					  32u,
																					  8u) : DEF_result__h491;
  DEF_bsrap_bsrp_inFifo_notEmpty____d1 = INST_bsrap_bsrp_inFifo.METH_notEmpty();
  DEF_bsrap_bsrp_reg4_BIT_71___d6 = DEF_bsrap_bsrp_reg4___d5.get_bits_in_word8(2u, 7u, 1u);
  DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_reg3___d53.get_bits_in_word8(2u,
																	     7u,
																	     1u) << 7u) | (tUInt8)(DEF_x__h2175 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h2175 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h2175)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_reg3___d53.get_bits_in_word8(0u,
																											    0u,
																											    7u)),
														      0u);
  DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_reg1___d31.get_bits_in_word8(2u,
																	     7u,
																	     1u) << 7u) | (tUInt8)(DEF_x__h1181 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h1181 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h1181)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_reg1___d31.get_bits_in_word8(0u,
																											    0u,
																											    7u)),
														      0u);
  DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_reg2___d42.get_bits_in_word8(2u,
																	     7u,
																	     1u) << 7u) | (tUInt8)(DEF_x__h1594 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h1594 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h1594)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_reg2___d42.get_bits_in_word8(0u,
																											    0u,
																											    7u)),
														      0u);
  DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_reg0___d20.get_bits_in_word8(2u,
																	     7u,
																	     1u) << 7u) | (tUInt8)(DEF_x__h853 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h853 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h853)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_reg0___d20.get_bits_in_word8(0u,
																											   0u,
																											   7u)),
														      0u);
  DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_inFifo_notEmpty____d1 << 7u) | (tUInt8)(DEF_x__h536 >> 57u)),
										2u,
										0u,
										8u).set_whole_word((tUInt32)(DEF_x__h536 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h536)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
																												    0u,
																												    7u)),
														      0u);
  INST_bsrap_bsrp_reg0.METH_write(DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19);
  if (DEF_bsrap_bsrp_inFifo_notEmpty____d1)
    INST_bsrap_bsrp_inFifo.METH_deq();
  INST_bsrap_bsrp_reg1.METH_write(DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30);
  INST_bsrap_bsrp_reg2.METH_write(DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41);
  INST_bsrap_bsrp_reg3.METH_write(DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52);
  INST_bsrap_bsrp_reg4.METH_write(DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63);
  if (DEF_bsrap_bsrp_reg4_BIT_71___d6)
    INST_bsrap_bsrp_outFifo.METH_enq(DEF_result__h3034);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomVal_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3735928559llu);
  INST_randomVal_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomShift_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3405691582llu);
  INST_randomShift_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_request()
{
  tUInt32 DEF_x__h5293;
  tUInt8 DEF_x__h5265;
  tUInt8 DEF_x__h5236;
  DEF_x__h5312 = INST_input_cycle.METH_read();
  DEF_x__h5293 = DEF_x__h5312 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_TASK_getRandom___d83 = getRandom();
  DEF_x__h5265 = (tUInt8)(DEF_TASK_getRandom___d83 >> 63u);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_x__h5090 = getRandom();
  DEF_x__h5236 = (tUInt8)((tUInt8)63u & DEF_x__h5090);
  DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d83 >> 58u),
										2u,
										0u,
										6u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d83 >> 26u),
												   1u).set_whole_word((((tUInt32)(67108863u & DEF_TASK_getRandom___d83)) << 6u) | (tUInt32)(DEF_x__h5236),
														      0u);
  DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d83 >> 57u),
										2u,
										0u,
										7u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d83 >> 25u),
												   1u).set_whole_word(((((tUInt32)(33554431u & DEF_TASK_getRandom___d83)) << 7u) | (((tUInt32)(DEF_x__h5236)) << 1u)) | (tUInt32)(DEF_x__h5265),
														      0u);
  INST_valFifo.METH_enq(DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86);
  INST_bsrap_bsrp_inFifo.METH_enq(DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88);
  INST_input_cycle.METH_write(DEF_x__h5293);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_response()
{
  tUInt32 DEF_x__h5664;
  tUInt32 DEF_x__h5535;
  tUInt8 DEF_output_cycle_0_EQ_128_1_AND_correct_6_EQ_128_7___d98;
  tUInt8 DEF_output_cycle_0_EQ_128_1_AND_NOT_correct_6_EQ_1_ETC___d100;
  tUInt8 DEF_NOT_output_cycle_0_EQ_128_1_01_AND_bsrap_bsrp__ETC___d108;
  tUInt8 DEF_NOT_output_cycle_0_EQ_128_1___d101;
  tUInt8 DEF_NOT_output_cycle_0_EQ_128_1_01_AND_NOT_bsrap_b_ETC___d111;
  tUInt8 DEF_correct_6_EQ_128___d97;
  tUInt64 DEF_trueResult__h5463;
  tUInt8 DEF_valFifo_first__03_BITS_5_TO_0___d105;
  tUInt64 DEF_val__h5460;
  tUInt64 DEF_v__h5399;
  tUInt32 DEF_x__h5554;
  tUInt8 DEF_bsrap_bsrp_outFifo_first__02_EQ_valFifo_first__ETC___d107;
  DEF_x__h5668 = INST_output_cycle.METH_read();
  DEF_x__h5554 = INST_correct.METH_read();
  DEF_valFifo_first____d103 = INST_valFifo.METH_first();
  DEF_v__h5399 = INST_bsrap_bsrp_outFifo.METH_first();
  DEF_val__h5460 = primExtract64(64u, 70u, DEF_valFifo_first____d103, 32u, 69u, 32u, 6u);
  DEF_valFifo_first__03_BITS_5_TO_0___d105 = DEF_valFifo_first____d103.get_bits_in_word8(0u, 0u, 6u);
  DEF_trueResult__h5463 = primShiftRA64(64u,
					64u,
					(tUInt64)(DEF_val__h5460),
					6u,
					(tUInt8)(DEF_valFifo_first__03_BITS_5_TO_0___d105));
  DEF_bsrap_bsrp_outFifo_first__02_EQ_valFifo_first__ETC___d107 = DEF_v__h5399 == DEF_trueResult__h5463;
  DEF_correct_6_EQ_128___d97 = DEF_x__h5554 == 128u;
  DEF_output_cycle_0_EQ_128___d91 = DEF_x__h5668 == 128u;
  DEF_NOT_output_cycle_0_EQ_128_1___d101 = !DEF_output_cycle_0_EQ_128___d91;
  DEF_NOT_output_cycle_0_EQ_128_1_01_AND_NOT_bsrap_b_ETC___d111 = DEF_NOT_output_cycle_0_EQ_128_1___d101 && !DEF_bsrap_bsrp_outFifo_first__02_EQ_valFifo_first__ETC___d107;
  DEF_NOT_output_cycle_0_EQ_128_1_01_AND_bsrap_bsrp__ETC___d108 = DEF_NOT_output_cycle_0_EQ_128_1___d101 && DEF_bsrap_bsrp_outFifo_first__02_EQ_valFifo_first__ETC___d107;
  DEF_output_cycle_0_EQ_128_1_AND_NOT_correct_6_EQ_1_ETC___d100 = DEF_output_cycle_0_EQ_128___d91 && !DEF_correct_6_EQ_128___d97;
  DEF_output_cycle_0_EQ_128_1_AND_correct_6_EQ_128_7___d98 = DEF_output_cycle_0_EQ_128___d91 && DEF_correct_6_EQ_128___d97;
  DEF_x__h5535 = DEF_x__h5554 + 1u;
  DEF_x__h5664 = DEF_x__h5668 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_output_cycle_0_EQ_128_1_AND_correct_6_EQ_128_7___d98)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_output_cycle_0_EQ_128_1_AND_correct_6_EQ_128_7___d98)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_output_cycle_0_EQ_128_1_AND_NOT_correct_6_EQ_1_ETC___d100)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_2, DEF_x__h5554, DEF_x__h5668);
    if (DEF_output_cycle_0_EQ_128_1_AND_NOT_correct_6_EQ_1_ETC___d100)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_0_EQ_128_1___d101)
    INST_bsrap_bsrp_outFifo.METH_deq();
  if (DEF_NOT_output_cycle_0_EQ_128_1_01_AND_bsrap_bsrp__ETC___d108)
    INST_correct.METH_write(DEF_x__h5535);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_output_cycle_0_EQ_128_1_01_AND_NOT_bsrap_b_ETC___d111)
      dollar_display(sim_hdl,
		     this,
		     "s,64,6,64,64",
		     &__str_literal_3,
		     DEF_val__h5460,
		     DEF_valFifo_first__03_BITS_5_TO_0___d105,
		     DEF_v__h5399,
		     DEF_trueResult__h5463);
    if (DEF_NOT_output_cycle_0_EQ_128_1_01_AND_NOT_bsrap_b_ETC___d111)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_0_EQ_128_1___d101)
    INST_valFifo.METH_deq();
  if (DEF_NOT_output_cycle_0_EQ_128_1___d101)
    INST_output_cycle.METH_write(DEF_x__h5664);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRightArithmeticPipelined::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_valFifo.reset_RST(ARG_rst_in);
  INST_randomVal_init.reset_RST(ARG_rst_in);
  INST_randomShift_init.reset_RST(ARG_rst_in);
  INST_output_cycle.reset_RST(ARG_rst_in);
  INST_input_cycle.reset_RST(ARG_rst_in);
  INST_correct.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg4.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg3.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg2.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg1.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg0.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_outFifo.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_inFifo.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRightArithmeticPipelined::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRightArithmeticPipelined::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_bsrap_bsrp_inFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_outFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg0.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg1.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg2.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg3.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg4.dump_state(indent + 2u);
  INST_correct.dump_state(indent + 2u);
  INST_input_cycle.dump_state(indent + 2u);
  INST_output_cycle.dump_state(indent + 2u);
  INST_randomShift_init.dump_state(indent + 2u);
  INST_randomVal_init.dump_state(indent + 2u);
  INST_valFifo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRightArithmeticPipelined::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 35u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom___d83", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_first____d11", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty____d1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg0___d20", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg1___d31", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg2___d42", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg3___d53", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg4_BIT_71___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg4___d5", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "output_cycle_0_EQ_128___d91", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "valFifo_first____d103", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5090", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5312", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5668", 32u);
  num = INST_bsrap_bsrp_inFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_outFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg0.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg1.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg2.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg3.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg4.dump_VCD_defs(num);
  num = INST_correct.dump_VCD_defs(num);
  num = INST_input_cycle.dump_VCD_defs(num);
  num = INST_output_cycle.dump_VCD_defs(num);
  num = INST_randomShift_init.dump_VCD_defs(num);
  num = INST_randomVal_init.dump_VCD_defs(num);
  num = INST_valFifo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRightArithmeticPipelined::dump_VCD(tVCDDumpType dt,
						unsigned int levels,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRightArithmeticPipelined::vcd_defs(tVCDDumpType dt,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86) != DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86, 70u);
	backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88) != DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88, 71u);
	backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom___d83) != DEF_TASK_getRandom___d83)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom___d83, 64u);
	backing.DEF_TASK_getRandom___d83 = DEF_TASK_getRandom___d83;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_first____d11) != DEF_bsrap_bsrp_inFifo_first____d11)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
	backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19) != DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19, 72u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1) != DEF_bsrap_bsrp_inFifo_notEmpty____d1)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30) != DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30, 72u);
	backing.DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30 = DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg0___d20) != DEF_bsrap_bsrp_reg0___d20)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg0___d20, 72u);
	backing.DEF_bsrap_bsrp_reg0___d20 = DEF_bsrap_bsrp_reg0___d20;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41) != DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41, 72u);
	backing.DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41 = DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg1___d31) != DEF_bsrap_bsrp_reg1___d31)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg1___d31, 72u);
	backing.DEF_bsrap_bsrp_reg1___d31 = DEF_bsrap_bsrp_reg1___d31;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52) != DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52, 72u);
	backing.DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52 = DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg2___d42) != DEF_bsrap_bsrp_reg2___d42)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg2___d42, 72u);
	backing.DEF_bsrap_bsrp_reg2___d42 = DEF_bsrap_bsrp_reg2___d42;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63) != DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63, 72u);
	backing.DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63 = DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg3___d53) != DEF_bsrap_bsrp_reg3___d53)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg3___d53, 72u);
	backing.DEF_bsrap_bsrp_reg3___d53 = DEF_bsrap_bsrp_reg3___d53;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg4_BIT_71___d6) != DEF_bsrap_bsrp_reg4_BIT_71___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg4_BIT_71___d6, 1u);
	backing.DEF_bsrap_bsrp_reg4_BIT_71___d6 = DEF_bsrap_bsrp_reg4_BIT_71___d6;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg4___d5) != DEF_bsrap_bsrp_reg4___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg4___d5, 72u);
	backing.DEF_bsrap_bsrp_reg4___d5 = DEF_bsrap_bsrp_reg4___d5;
      }
      ++num;
      if ((backing.DEF_output_cycle_0_EQ_128___d91) != DEF_output_cycle_0_EQ_128___d91)
      {
	vcd_write_val(sim_hdl, num, DEF_output_cycle_0_EQ_128___d91, 1u);
	backing.DEF_output_cycle_0_EQ_128___d91 = DEF_output_cycle_0_EQ_128___d91;
      }
      ++num;
      if ((backing.DEF_valFifo_first____d103) != DEF_valFifo_first____d103)
      {
	vcd_write_val(sim_hdl, num, DEF_valFifo_first____d103, 70u);
	backing.DEF_valFifo_first____d103 = DEF_valFifo_first____d103;
      }
      ++num;
      if ((backing.DEF_x__h5090) != DEF_x__h5090)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5090, 64u);
	backing.DEF_x__h5090 = DEF_x__h5090;
      }
      ++num;
      if ((backing.DEF_x__h5312) != DEF_x__h5312)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5312, 32u);
	backing.DEF_x__h5312 = DEF_x__h5312;
      }
      ++num;
      if ((backing.DEF_x__h5668) != DEF_x__h5668)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5668, 32u);
	backing.DEF_x__h5668 = DEF_x__h5668;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86, 70u);
      backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d86;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88, 71u);
      backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d88;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom___d83, 64u);
      backing.DEF_TASK_getRandom___d83 = DEF_TASK_getRandom___d83;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
      backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19, 72u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d19;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30, 72u);
      backing.DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30 = DEF_bsrap_bsrp_reg0_0_BIT_71_1_CONCAT_IF_bsrap_bsr_ETC___d30;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg0___d20, 72u);
      backing.DEF_bsrap_bsrp_reg0___d20 = DEF_bsrap_bsrp_reg0___d20;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41, 72u);
      backing.DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41 = DEF_bsrap_bsrp_reg1_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d41;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg1___d31, 72u);
      backing.DEF_bsrap_bsrp_reg1___d31 = DEF_bsrap_bsrp_reg1___d31;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52, 72u);
      backing.DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52 = DEF_bsrap_bsrp_reg2_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d52;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg2___d42, 72u);
      backing.DEF_bsrap_bsrp_reg2___d42 = DEF_bsrap_bsrp_reg2___d42;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63, 72u);
      backing.DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63 = DEF_bsrap_bsrp_reg3_3_BIT_71_4_CONCAT_IF_bsrap_bsr_ETC___d63;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg3___d53, 72u);
      backing.DEF_bsrap_bsrp_reg3___d53 = DEF_bsrap_bsrp_reg3___d53;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg4_BIT_71___d6, 1u);
      backing.DEF_bsrap_bsrp_reg4_BIT_71___d6 = DEF_bsrap_bsrp_reg4_BIT_71___d6;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg4___d5, 72u);
      backing.DEF_bsrap_bsrp_reg4___d5 = DEF_bsrap_bsrp_reg4___d5;
      vcd_write_val(sim_hdl, num++, DEF_output_cycle_0_EQ_128___d91, 1u);
      backing.DEF_output_cycle_0_EQ_128___d91 = DEF_output_cycle_0_EQ_128___d91;
      vcd_write_val(sim_hdl, num++, DEF_valFifo_first____d103, 70u);
      backing.DEF_valFifo_first____d103 = DEF_valFifo_first____d103;
      vcd_write_val(sim_hdl, num++, DEF_x__h5090, 64u);
      backing.DEF_x__h5090 = DEF_x__h5090;
      vcd_write_val(sim_hdl, num++, DEF_x__h5312, 32u);
      backing.DEF_x__h5312 = DEF_x__h5312;
      vcd_write_val(sim_hdl, num++, DEF_x__h5668, 32u);
      backing.DEF_x__h5668 = DEF_x__h5668;
    }
}

void MOD_mkTbRightArithmeticPipelined::vcd_prims(tVCDDumpType dt,
						 MOD_mkTbRightArithmeticPipelined &backing)
{
  INST_bsrap_bsrp_inFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_inFifo);
  INST_bsrap_bsrp_outFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_outFifo);
  INST_bsrap_bsrp_reg0.dump_VCD(dt, backing.INST_bsrap_bsrp_reg0);
  INST_bsrap_bsrp_reg1.dump_VCD(dt, backing.INST_bsrap_bsrp_reg1);
  INST_bsrap_bsrp_reg2.dump_VCD(dt, backing.INST_bsrap_bsrp_reg2);
  INST_bsrap_bsrp_reg3.dump_VCD(dt, backing.INST_bsrap_bsrp_reg3);
  INST_bsrap_bsrp_reg4.dump_VCD(dt, backing.INST_bsrap_bsrp_reg4);
  INST_correct.dump_VCD(dt, backing.INST_correct);
  INST_input_cycle.dump_VCD(dt, backing.INST_input_cycle);
  INST_output_cycle.dump_VCD(dt, backing.INST_output_cycle);
  INST_randomShift_init.dump_VCD(dt, backing.INST_randomShift_init);
  INST_randomVal_init.dump_VCD(dt, backing.INST_randomVal_init);
  INST_valFifo.dump_VCD(dt, backing.INST_valFifo);
}
