/*
 * Generated by Bluespec Compiler (build ad73d8a)
 * 
 * On Fri Mar 19 08:59:21 KST 2021
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRightArithmeticPipelined.h"
#include "imported_BDPI_functions.h"


/* Literal declarations */
static unsigned int const UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
									 2863311530u,
									 42u };
static tUWide const UWide_literal_72_h2aaaaaaaaaaaaaaaaa(72u,
							 UWide_literal_72_h2aaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_2("FAILED %d correct values out of %d", 34u);
static std::string const __str_literal_3("FAILED Right Arithmetic Shift %b >> %d gave %b instead of %b",
					 60u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRightArithmeticPipelined::MOD_mkTbRightArithmeticPipelined(tSimStateHdl simHdl,
								   char const *name,
								   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_bsrap_bsrp_inFifo(simHdl, "bsrap_bsrp_inFifo", this, 71u, 2u, 1u, 0u),
    INST_bsrap_bsrp_outFifo(simHdl, "bsrap_bsrp_outFifo", this, 64u, 2u, 1u, 0u),
    INST_bsrap_bsrp_reg0(simHdl,
			 "bsrap_bsrp_reg0",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_bsrap_bsrp_reg1(simHdl,
			 "bsrap_bsrp_reg1",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_bsrap_bsrp_reg2(simHdl,
			 "bsrap_bsrp_reg2",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_bsrap_bsrp_reg3(simHdl,
			 "bsrap_bsrp_reg3",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_bsrap_bsrp_reg4(simHdl,
			 "bsrap_bsrp_reg4",
			 this,
			 72u,
			 bs_wide_tmp(72u).set_bits_in_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_bits_in_word8(2u,
														  0u,
														  8u),
							   2u,
							   0u,
							   8u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(1u),
									      1u).set_whole_word(UWide_literal_72_h2aaaaaaaaaaaaaaaaa.get_whole_word(0u),
												 0u),
			 (tUInt8)0u),
    INST_correct(simHdl, "correct", this, 32u, 0u, (tUInt8)0u),
    INST_input_cycle(simHdl, "input_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_output_cycle(simHdl, "output_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_randomShift_init(simHdl, "randomShift_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal_init(simHdl, "randomVal_init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_valFifo(simHdl, "valFifo", this, 70u, 10u, 1u, 0u),
    PORT_RST_N((tUInt8)1u),
    DEF_bsrap_bsrp_reg4___d5(72u),
    DEF_x__h5137(12297829382473034410llu),
    DEF_TASK_getRandom___d93(12297829382473034410llu),
    DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96(70u),
    DEF_bsrap_bsrp_reg3___d61(72u),
    DEF_bsrap_bsrp_reg2___d48(72u),
    DEF_bsrap_bsrp_reg1___d35(72u),
    DEF_bsrap_bsrp_reg0___d22(72u),
    DEF_bsrap_bsrp_inFifo_first____d11(71u),
    DEF_valFifo_first____d113(70u),
    DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72(71u),
    DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71(71u),
    DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59(71u),
    DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58(71u),
    DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46(71u),
    DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45(71u),
    DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33(71u),
    DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32(71u),
    DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20(71u),
    DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19(71u),
    DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73(72u),
    DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60(72u),
    DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47(72u),
    DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34(72u),
    DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21(72u),
    DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98(71u)
{
  symbol_count = 20u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRightArithmeticPipelined::init_symbols_0()
{
  init_symbol(&symbols[0u], "bsrap_bsrp_inFifo", SYM_MODULE, &INST_bsrap_bsrp_inFifo);
  init_symbol(&symbols[1u], "bsrap_bsrp_outFifo", SYM_MODULE, &INST_bsrap_bsrp_outFifo);
  init_symbol(&symbols[2u], "bsrap_bsrp_reg0", SYM_MODULE, &INST_bsrap_bsrp_reg0);
  init_symbol(&symbols[3u], "bsrap_bsrp_reg1", SYM_MODULE, &INST_bsrap_bsrp_reg1);
  init_symbol(&symbols[4u], "bsrap_bsrp_reg2", SYM_MODULE, &INST_bsrap_bsrp_reg2);
  init_symbol(&symbols[5u], "bsrap_bsrp_reg3", SYM_MODULE, &INST_bsrap_bsrp_reg3);
  init_symbol(&symbols[6u], "bsrap_bsrp_reg4", SYM_MODULE, &INST_bsrap_bsrp_reg4);
  init_symbol(&symbols[7u], "correct", SYM_MODULE, &INST_correct);
  init_symbol(&symbols[8u], "input_cycle", SYM_MODULE, &INST_input_cycle);
  init_symbol(&symbols[9u], "output_cycle", SYM_MODULE, &INST_output_cycle);
  init_symbol(&symbols[10u], "RL_bsrap_bsrp_shift", SYM_RULE);
  init_symbol(&symbols[11u], "RL_randomShift_initialize", SYM_RULE);
  init_symbol(&symbols[12u], "RL_randomVal_initialize", SYM_RULE);
  init_symbol(&symbols[13u], "RL_test_request", SYM_RULE);
  init_symbol(&symbols[14u], "RL_test_response", SYM_RULE);
  init_symbol(&symbols[15u], "randomShift_init", SYM_MODULE, &INST_randomShift_init);
  init_symbol(&symbols[16u], "randomVal_init", SYM_MODULE, &INST_randomVal_init);
  init_symbol(&symbols[17u], "valFifo", SYM_MODULE, &INST_valFifo);
  init_symbol(&symbols[18u], "x__h5371", SYM_DEF, &DEF_x__h5371, 32u);
  init_symbol(&symbols[19u], "x__h5722", SYM_DEF, &DEF_x__h5722, 32u);
}


/* Rule actions */

void MOD_mkTbRightArithmeticPipelined::RL_bsrap_bsrp_shift()
{
  tUInt64 DEF_x__h841;
  tUInt64 DEF_x__h520;
  tUInt64 DEF_x__h1173;
  tUInt64 DEF_x__h1590;
  tUInt64 DEF_x__h2175;
  tUInt64 DEF_result__h3047;
  tUInt64 DEF_result__h484;
  tUInt64 DEF_result__h3045;
  tUInt64 DEF_result__h812;
  tUInt64 DEF_result__h1144;
  tUInt64 DEF_result__h1561;
  tUInt64 DEF_result__h2146;
  DEF_bsrap_bsrp_reg4___d5 = INST_bsrap_bsrp_reg4.METH_read();
  DEF_result__h3045 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg4___d5, 32u, 70u, 32u, 7u);
  DEF_result__h3047 = DEF_bsrap_bsrp_reg4___d5.get_bits_in_word8(0u,
								 6u,
								 1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg4___d5.get_bits_in_word8(0u,
															      0u,
															      1u) ? 4294967295u : 0u)) << 32u) | (tUInt64)(primExtract32(32u,
																							 72u,
																							 DEF_bsrap_bsrp_reg4___d5,
																							 32u,
																							 70u,
																							 32u,
																							 39u)) : DEF_result__h3045;
  DEF_bsrap_bsrp_reg3___d61 = INST_bsrap_bsrp_reg3.METH_read();
  DEF_result__h2146 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg3___d61, 32u, 70u, 32u, 7u);
  DEF_x__h2175 = DEF_bsrap_bsrp_reg3___d61.get_bits_in_word8(0u,
							     5u,
							     1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg3___d61.get_bits_in_word8(0u,
															   0u,
															   1u) ? 65535u : 0u)) << 48u) | primExtract64(48u,
																				       72u,
																				       DEF_bsrap_bsrp_reg3___d61,
																				       32u,
																				       70u,
																				       32u,
																				       23u) : DEF_result__h2146;
  DEF_bsrap_bsrp_reg2___d48 = INST_bsrap_bsrp_reg2.METH_read();
  DEF_result__h1561 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg2___d48, 32u, 70u, 32u, 7u);
  DEF_x__h1590 = DEF_bsrap_bsrp_reg2___d48.get_bits_in_word8(0u,
							     4u,
							     1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg2___d48.get_bits_in_word8(0u,
															   0u,
															   1u) ? (tUInt8)255u : (tUInt8)0u)) << 56u) | primExtract64(56u,
																						     72u,
																						     DEF_bsrap_bsrp_reg2___d48,
																						     32u,
																						     70u,
																						     32u,
																						     15u) : DEF_result__h1561;
  DEF_bsrap_bsrp_reg1___d35 = INST_bsrap_bsrp_reg1.METH_read();
  DEF_result__h1144 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg1___d35, 32u, 70u, 32u, 7u);
  DEF_x__h1173 = DEF_bsrap_bsrp_reg1___d35.get_bits_in_word8(0u,
							     3u,
							     1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg1___d35.get_bits_in_word8(0u,
															   0u,
															   1u) ? (tUInt8)15u : (tUInt8)0u)) << 60u) | primExtract64(60u,
																						    72u,
																						    DEF_bsrap_bsrp_reg1___d35,
																						    32u,
																						    70u,
																						    32u,
																						    11u) : DEF_result__h1144;
  DEF_bsrap_bsrp_reg0___d22 = INST_bsrap_bsrp_reg0.METH_read();
  DEF_result__h812 = primExtract64(64u, 72u, DEF_bsrap_bsrp_reg0___d22, 32u, 70u, 32u, 7u);
  DEF_x__h841 = DEF_bsrap_bsrp_reg0___d22.get_bits_in_word8(0u,
							    2u,
							    1u) ? (((tUInt64)(DEF_bsrap_bsrp_reg0___d22.get_bits_in_word8(0u,
															  0u,
															  1u) ? (tUInt8)3u : (tUInt8)0u)) << 62u) | primExtract64(62u,
																						  72u,
																						  DEF_bsrap_bsrp_reg0___d22,
																						  32u,
																						  70u,
																						  32u,
																						  9u) : DEF_result__h812;
  DEF_bsrap_bsrp_inFifo_first____d11 = INST_bsrap_bsrp_inFifo.METH_first();
  DEF_result__h484 = primExtract64(64u, 71u, DEF_bsrap_bsrp_inFifo_first____d11, 32u, 70u, 32u, 7u);
  DEF_x__h520 = DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
								     1u,
								     1u) ? (((tUInt64)(DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
																	    0u,
																	    1u))) << 63u) | primExtract64(63u,
																					  71u,
																					  DEF_bsrap_bsrp_inFifo_first____d11,
																					  32u,
																					  70u,
																					  32u,
																					  8u) : DEF_result__h484;
  DEF_bsrap_bsrp_inFifo_notEmpty____d1 = INST_bsrap_bsrp_inFifo.METH_notEmpty();
  DEF_bsrap_bsrp_reg4_BIT_71___d6 = DEF_bsrap_bsrp_reg4___d5.get_bits_in_word8(2u, 7u, 1u);
  DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71.set_bits_in_word((tUInt8)(DEF_x__h2175 >> 57u),
										2u,
										0u,
										7u).set_whole_word((tUInt32)(DEF_x__h2175 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h2175)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_reg3___d61.get_bits_in_word8(0u,
																											    0u,
																											    7u)),
														      0u);
  DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72 = DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71;
  DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58.set_bits_in_word((tUInt8)(DEF_x__h1590 >> 57u),
										2u,
										0u,
										7u).set_whole_word((tUInt32)(DEF_x__h1590 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h1590)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_reg2___d48.get_bits_in_word8(0u,
																											    0u,
																											    7u)),
														      0u);
  DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59 = DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58;
  DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45.set_bits_in_word((tUInt8)(DEF_x__h1173 >> 57u),
										2u,
										0u,
										7u).set_whole_word((tUInt32)(DEF_x__h1173 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h1173)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_reg1___d35.get_bits_in_word8(0u,
																											    0u,
																											    7u)),
														      0u);
  DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46 = DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45;
  DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32.set_bits_in_word((tUInt8)(DEF_x__h841 >> 57u),
										2u,
										0u,
										7u).set_whole_word((tUInt32)(DEF_x__h841 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h841)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_reg0___d22.get_bits_in_word8(0u,
																											   0u,
																											   7u)),
														      0u);
  DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33 = DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32;
  DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_reg3___d61.get_bits_in_word8(2u,
																	     7u,
																	     1u) << 7u) | DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72.get_bits_in_word8(2u,
																													 0u,
																													 7u)),
										2u,
										0u,
										8u).set_whole_word(DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72.get_whole_word(1u),
												   1u).set_whole_word(DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72.get_whole_word(0u),
														      0u);
  DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19.set_bits_in_word((tUInt8)(DEF_x__h520 >> 57u),
										2u,
										0u,
										7u).set_whole_word((tUInt32)(DEF_x__h520 >> 25u),
												   1u).set_whole_word((((tUInt32)(33554431u & DEF_x__h520)) << 7u) | (tUInt32)(DEF_bsrap_bsrp_inFifo_first____d11.get_bits_in_word8(0u,
																												    0u,
																												    7u)),
														      0u);
  DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20 = DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19;
  DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_reg2___d48.get_bits_in_word8(2u,
																	     7u,
																	     1u) << 7u) | DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59.get_bits_in_word8(2u,
																													 0u,
																													 7u)),
										2u,
										0u,
										8u).set_whole_word(DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59.get_whole_word(1u),
												   1u).set_whole_word(DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59.get_whole_word(0u),
														      0u);
  DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_reg1___d35.get_bits_in_word8(2u,
																	     7u,
																	     1u) << 7u) | DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46.get_bits_in_word8(2u,
																													 0u,
																													 7u)),
										2u,
										0u,
										8u).set_whole_word(DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46.get_whole_word(1u),
												   1u).set_whole_word(DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46.get_whole_word(0u),
														      0u);
  DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_reg0___d22.get_bits_in_word8(2u,
																	     7u,
																	     1u) << 7u) | DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33.get_bits_in_word8(2u,
																													 0u,
																													 7u)),
										2u,
										0u,
										8u).set_whole_word(DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33.get_whole_word(1u),
												   1u).set_whole_word(DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33.get_whole_word(0u),
														      0u);
  DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21.set_bits_in_word((tUInt8)255u & ((DEF_bsrap_bsrp_inFifo_notEmpty____d1 << 7u) | DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20.get_bits_in_word8(2u,
																											      0u,
																											      7u)),
										2u,
										0u,
										8u).set_whole_word(DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20.get_whole_word(1u),
												   1u).set_whole_word(DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20.get_whole_word(0u),
														      0u);
  INST_bsrap_bsrp_reg0.METH_write(DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21);
  if (DEF_bsrap_bsrp_inFifo_notEmpty____d1)
    INST_bsrap_bsrp_inFifo.METH_deq();
  INST_bsrap_bsrp_reg1.METH_write(DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34);
  INST_bsrap_bsrp_reg2.METH_write(DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47);
  INST_bsrap_bsrp_reg3.METH_write(DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60);
  INST_bsrap_bsrp_reg4.METH_write(DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73);
  if (DEF_bsrap_bsrp_reg4_BIT_71___d6)
    INST_bsrap_bsrp_outFifo.METH_enq(DEF_result__h3047);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomVal_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3735928559llu);
  INST_randomVal_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_randomShift_initialize()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    setSeed(3405691582llu);
  INST_randomShift_init.METH_write((tUInt8)1u);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_request()
{
  tUInt32 DEF_x__h5352;
  tUInt8 DEF_x__h5324;
  tUInt8 DEF_x__h5289;
  DEF_x__h5371 = INST_input_cycle.METH_read();
  DEF_x__h5352 = DEF_x__h5371 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_TASK_getRandom___d93 = getRandom();
  DEF_x__h5324 = (tUInt8)(DEF_TASK_getRandom___d93 >> 63u);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_x__h5137 = getRandom();
  DEF_x__h5289 = (tUInt8)((tUInt8)63u & DEF_x__h5137);
  DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d93 >> 58u),
										2u,
										0u,
										6u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d93 >> 26u),
												   1u).set_whole_word((((tUInt32)(67108863u & DEF_TASK_getRandom___d93)) << 6u) | (tUInt32)(DEF_x__h5289),
														      0u);
  DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98.set_bits_in_word((tUInt8)(DEF_TASK_getRandom___d93 >> 57u),
										2u,
										0u,
										7u).set_whole_word((tUInt32)(DEF_TASK_getRandom___d93 >> 25u),
												   1u).set_whole_word(((((tUInt32)(33554431u & DEF_TASK_getRandom___d93)) << 7u) | (((tUInt32)(DEF_x__h5289)) << 1u)) | (tUInt32)(DEF_x__h5324),
														      0u);
  INST_valFifo.METH_enq(DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96);
  INST_bsrap_bsrp_inFifo.METH_enq(DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98);
  INST_input_cycle.METH_write(DEF_x__h5352);
}

void MOD_mkTbRightArithmeticPipelined::RL_test_response()
{
  tUInt32 DEF_x__h5718;
  tUInt32 DEF_x__h5582;
  tUInt8 DEF_output_cycle_00_EQ_128_01_AND_correct_06_EQ_12_ETC___d108;
  tUInt8 DEF_output_cycle_00_EQ_128_01_AND_NOT_correct_06_E_ETC___d110;
  tUInt8 DEF_NOT_output_cycle_00_EQ_128_01_11_AND_bsrap_bsr_ETC___d118;
  tUInt8 DEF_NOT_output_cycle_00_EQ_128_01___d111;
  tUInt8 DEF_NOT_output_cycle_00_EQ_128_01_11_AND_NOT_bsrap_ETC___d121;
  tUInt8 DEF_correct_06_EQ_128___d107;
  tUInt64 DEF_trueResult__h5510;
  tUInt8 DEF_valFifo_first__13_BITS_5_TO_0___d115;
  tUInt64 DEF_val__h5507;
  tUInt64 DEF_v__h5440;
  tUInt32 DEF_x__h5592;
  tUInt8 DEF_bsrap_bsrp_outFifo_first__12_EQ_valFifo_first__ETC___d117;
  DEF_x__h5722 = INST_output_cycle.METH_read();
  DEF_x__h5592 = INST_correct.METH_read();
  DEF_valFifo_first____d113 = INST_valFifo.METH_first();
  DEF_v__h5440 = INST_bsrap_bsrp_outFifo.METH_first();
  DEF_val__h5507 = primExtract64(64u, 70u, DEF_valFifo_first____d113, 32u, 69u, 32u, 6u);
  DEF_valFifo_first__13_BITS_5_TO_0___d115 = DEF_valFifo_first____d113.get_bits_in_word8(0u, 0u, 6u);
  DEF_trueResult__h5510 = primShiftRA64(64u,
					64u,
					(tUInt64)(DEF_val__h5507),
					6u,
					(tUInt8)(DEF_valFifo_first__13_BITS_5_TO_0___d115));
  DEF_bsrap_bsrp_outFifo_first__12_EQ_valFifo_first__ETC___d117 = DEF_v__h5440 == DEF_trueResult__h5510;
  DEF_correct_06_EQ_128___d107 = DEF_x__h5592 == 128u;
  DEF_output_cycle_00_EQ_128___d101 = DEF_x__h5722 == 128u;
  DEF_NOT_output_cycle_00_EQ_128_01___d111 = !DEF_output_cycle_00_EQ_128___d101;
  DEF_NOT_output_cycle_00_EQ_128_01_11_AND_NOT_bsrap_ETC___d121 = DEF_NOT_output_cycle_00_EQ_128_01___d111 && !DEF_bsrap_bsrp_outFifo_first__12_EQ_valFifo_first__ETC___d117;
  DEF_NOT_output_cycle_00_EQ_128_01_11_AND_bsrap_bsr_ETC___d118 = DEF_NOT_output_cycle_00_EQ_128_01___d111 && DEF_bsrap_bsrp_outFifo_first__12_EQ_valFifo_first__ETC___d117;
  DEF_output_cycle_00_EQ_128_01_AND_NOT_correct_06_E_ETC___d110 = DEF_output_cycle_00_EQ_128___d101 && !DEF_correct_06_EQ_128___d107;
  DEF_output_cycle_00_EQ_128_01_AND_correct_06_EQ_12_ETC___d108 = DEF_output_cycle_00_EQ_128___d101 && DEF_correct_06_EQ_128___d107;
  DEF_x__h5582 = DEF_x__h5592 + 1u;
  DEF_x__h5718 = DEF_x__h5722 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_output_cycle_00_EQ_128_01_AND_correct_06_EQ_12_ETC___d108)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_output_cycle_00_EQ_128_01_AND_correct_06_EQ_12_ETC___d108)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_output_cycle_00_EQ_128_01_AND_NOT_correct_06_E_ETC___d110)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_2, DEF_x__h5592, DEF_x__h5722);
    if (DEF_output_cycle_00_EQ_128_01_AND_NOT_correct_06_E_ETC___d110)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_00_EQ_128_01___d111)
    INST_bsrap_bsrp_outFifo.METH_deq();
  if (DEF_NOT_output_cycle_00_EQ_128_01_11_AND_bsrap_bsr_ETC___d118)
    INST_correct.METH_write(DEF_x__h5582);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_NOT_output_cycle_00_EQ_128_01_11_AND_NOT_bsrap_ETC___d121)
      dollar_display(sim_hdl,
		     this,
		     "s,64,6,64,64",
		     &__str_literal_3,
		     DEF_val__h5507,
		     DEF_valFifo_first__13_BITS_5_TO_0___d115,
		     DEF_v__h5440,
		     DEF_trueResult__h5510);
    if (DEF_NOT_output_cycle_00_EQ_128_01_11_AND_NOT_bsrap_ETC___d121)
      dollar_finish(sim_hdl, "32", 1u);
  }
  if (DEF_NOT_output_cycle_00_EQ_128_01___d111)
    INST_valFifo.METH_deq();
  if (DEF_NOT_output_cycle_00_EQ_128_01___d111)
    INST_output_cycle.METH_write(DEF_x__h5718);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRightArithmeticPipelined::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_valFifo.reset_RST(ARG_rst_in);
  INST_randomVal_init.reset_RST(ARG_rst_in);
  INST_randomShift_init.reset_RST(ARG_rst_in);
  INST_output_cycle.reset_RST(ARG_rst_in);
  INST_input_cycle.reset_RST(ARG_rst_in);
  INST_correct.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg4.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg3.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg2.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg1.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_reg0.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_outFifo.reset_RST(ARG_rst_in);
  INST_bsrap_bsrp_inFifo.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRightArithmeticPipelined::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRightArithmeticPipelined::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_bsrap_bsrp_inFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_outFifo.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg0.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg1.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg2.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg3.dump_state(indent + 2u);
  INST_bsrap_bsrp_reg4.dump_state(indent + 2u);
  INST_correct.dump_state(indent + 2u);
  INST_input_cycle.dump_state(indent + 2u);
  INST_output_cycle.dump_state(indent + 2u);
  INST_randomShift_init.dump_state(indent + 2u);
  INST_randomVal_init.dump_state(indent + 2u);
  INST_valFifo.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRightArithmeticPipelined::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 45u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72", 71u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "TASK_getRandom___d93", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_first____d11", 71u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_inFifo_notEmpty____d1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg0___d22", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg1___d35", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg2___d48", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg3___d61", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg4_BIT_71___d6", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "bsrap_bsrp_reg4___d5", 72u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "output_cycle_00_EQ_128___d101", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "valFifo_first____d113", 70u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5137", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5371", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5722", 32u);
  num = INST_bsrap_bsrp_inFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_outFifo.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg0.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg1.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg2.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg3.dump_VCD_defs(num);
  num = INST_bsrap_bsrp_reg4.dump_VCD_defs(num);
  num = INST_correct.dump_VCD_defs(num);
  num = INST_input_cycle.dump_VCD_defs(num);
  num = INST_output_cycle.dump_VCD_defs(num);
  num = INST_randomShift_init.dump_VCD_defs(num);
  num = INST_randomVal_init.dump_VCD_defs(num);
  num = INST_valFifo.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRightArithmeticPipelined::dump_VCD(tVCDDumpType dt,
						unsigned int levels,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRightArithmeticPipelined::vcd_defs(tVCDDumpType dt,
						MOD_mkTbRightArithmeticPipelined &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 71u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 72u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 70u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19) != DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19, 71u);
	backing.DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19 = DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19;
      }
      ++num;
      if ((backing.DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20) != DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20, 71u);
	backing.DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20 = DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20;
      }
      ++num;
      if ((backing.DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32) != DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32, 71u);
	backing.DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32 = DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32;
      }
      ++num;
      if ((backing.DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33) != DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33, 71u);
	backing.DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33 = DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33;
      }
      ++num;
      if ((backing.DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45) != DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45, 71u);
	backing.DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45 = DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45;
      }
      ++num;
      if ((backing.DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46) != DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46, 71u);
	backing.DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46 = DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46;
      }
      ++num;
      if ((backing.DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58) != DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58, 71u);
	backing.DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58 = DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58;
      }
      ++num;
      if ((backing.DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59) != DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59, 71u);
	backing.DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59 = DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59;
      }
      ++num;
      if ((backing.DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71) != DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71, 71u);
	backing.DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71 = DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71;
      }
      ++num;
      if ((backing.DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72) != DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72, 71u);
	backing.DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72 = DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96) != DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96, 70u);
	backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98) != DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98, 71u);
	backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98;
      }
      ++num;
      if ((backing.DEF_TASK_getRandom___d93) != DEF_TASK_getRandom___d93)
      {
	vcd_write_val(sim_hdl, num, DEF_TASK_getRandom___d93, 64u);
	backing.DEF_TASK_getRandom___d93 = DEF_TASK_getRandom___d93;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_first____d11) != DEF_bsrap_bsrp_inFifo_first____d11)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
	backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21) != DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21, 72u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1) != DEF_bsrap_bsrp_inFifo_notEmpty____d1)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
	backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34) != DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34, 72u);
	backing.DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34 = DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg0___d22) != DEF_bsrap_bsrp_reg0___d22)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg0___d22, 72u);
	backing.DEF_bsrap_bsrp_reg0___d22 = DEF_bsrap_bsrp_reg0___d22;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47) != DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47, 72u);
	backing.DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47 = DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg1___d35) != DEF_bsrap_bsrp_reg1___d35)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg1___d35, 72u);
	backing.DEF_bsrap_bsrp_reg1___d35 = DEF_bsrap_bsrp_reg1___d35;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60) != DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60, 72u);
	backing.DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60 = DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg2___d48) != DEF_bsrap_bsrp_reg2___d48)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg2___d48, 72u);
	backing.DEF_bsrap_bsrp_reg2___d48 = DEF_bsrap_bsrp_reg2___d48;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73) != DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73, 72u);
	backing.DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73 = DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg3___d61) != DEF_bsrap_bsrp_reg3___d61)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg3___d61, 72u);
	backing.DEF_bsrap_bsrp_reg3___d61 = DEF_bsrap_bsrp_reg3___d61;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg4_BIT_71___d6) != DEF_bsrap_bsrp_reg4_BIT_71___d6)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg4_BIT_71___d6, 1u);
	backing.DEF_bsrap_bsrp_reg4_BIT_71___d6 = DEF_bsrap_bsrp_reg4_BIT_71___d6;
      }
      ++num;
      if ((backing.DEF_bsrap_bsrp_reg4___d5) != DEF_bsrap_bsrp_reg4___d5)
      {
	vcd_write_val(sim_hdl, num, DEF_bsrap_bsrp_reg4___d5, 72u);
	backing.DEF_bsrap_bsrp_reg4___d5 = DEF_bsrap_bsrp_reg4___d5;
      }
      ++num;
      if ((backing.DEF_output_cycle_00_EQ_128___d101) != DEF_output_cycle_00_EQ_128___d101)
      {
	vcd_write_val(sim_hdl, num, DEF_output_cycle_00_EQ_128___d101, 1u);
	backing.DEF_output_cycle_00_EQ_128___d101 = DEF_output_cycle_00_EQ_128___d101;
      }
      ++num;
      if ((backing.DEF_valFifo_first____d113) != DEF_valFifo_first____d113)
      {
	vcd_write_val(sim_hdl, num, DEF_valFifo_first____d113, 70u);
	backing.DEF_valFifo_first____d113 = DEF_valFifo_first____d113;
      }
      ++num;
      if ((backing.DEF_x__h5137) != DEF_x__h5137)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5137, 64u);
	backing.DEF_x__h5137 = DEF_x__h5137;
      }
      ++num;
      if ((backing.DEF_x__h5371) != DEF_x__h5371)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5371, 32u);
	backing.DEF_x__h5371 = DEF_x__h5371;
      }
      ++num;
      if ((backing.DEF_x__h5722) != DEF_x__h5722)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5722, 32u);
	backing.DEF_x__h5722 = DEF_x__h5722;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19, 71u);
      backing.DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19 = DEF_IF_bsrap_bsrp_inFifo_first__1_BIT_1_2_THEN_bsr_ETC___d19;
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20, 71u);
      backing.DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20 = DEF_IF_bsrap_bsrp_inFifo_notEmpty_THEN_IF_bsrap_bs_ETC___d20;
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32, 71u);
      backing.DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32 = DEF_IF_bsrap_bsrp_reg0_2_BIT_2_4_THEN_IF_bsrap_bsr_ETC___d32;
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33, 71u);
      backing.DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33 = DEF_IF_bsrap_bsrp_reg0_2_BIT_71_3_THEN_IF_bsrap_bs_ETC___d33;
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45, 71u);
      backing.DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45 = DEF_IF_bsrap_bsrp_reg1_5_BIT_3_7_THEN_IF_bsrap_bsr_ETC___d45;
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46, 71u);
      backing.DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46 = DEF_IF_bsrap_bsrp_reg1_5_BIT_71_6_THEN_IF_bsrap_bs_ETC___d46;
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58, 71u);
      backing.DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58 = DEF_IF_bsrap_bsrp_reg2_8_BIT_4_0_THEN_IF_bsrap_bsr_ETC___d58;
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59, 71u);
      backing.DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59 = DEF_IF_bsrap_bsrp_reg2_8_BIT_71_9_THEN_IF_bsrap_bs_ETC___d59;
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71, 71u);
      backing.DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71 = DEF_IF_bsrap_bsrp_reg3_1_BIT_5_3_THEN_IF_bsrap_bsr_ETC___d71;
      vcd_write_val(sim_hdl, num++, DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72, 71u);
      backing.DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72 = DEF_IF_bsrap_bsrp_reg3_1_BIT_71_2_THEN_IF_bsrap_bs_ETC___d72;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96, 70u);
      backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d96;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98, 71u);
      backing.DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98 = DEF_TASK_getRandom_3_CONCAT_TASK_getRandom_4_BITS__ETC___d98;
      vcd_write_val(sim_hdl, num++, DEF_TASK_getRandom___d93, 64u);
      backing.DEF_TASK_getRandom___d93 = DEF_TASK_getRandom___d93;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_first____d11, 71u);
      backing.DEF_bsrap_bsrp_inFifo_first____d11 = DEF_bsrap_bsrp_inFifo_first____d11;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21, 72u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21 = DEF_bsrap_bsrp_inFifo_notEmpty_CONCAT_IF_bsrap_bsr_ETC___d21;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_inFifo_notEmpty____d1, 1u);
      backing.DEF_bsrap_bsrp_inFifo_notEmpty____d1 = DEF_bsrap_bsrp_inFifo_notEmpty____d1;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34, 72u);
      backing.DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34 = DEF_bsrap_bsrp_reg0_2_BIT_71_3_CONCAT_IF_bsrap_bsr_ETC___d34;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg0___d22, 72u);
      backing.DEF_bsrap_bsrp_reg0___d22 = DEF_bsrap_bsrp_reg0___d22;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47, 72u);
      backing.DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47 = DEF_bsrap_bsrp_reg1_5_BIT_71_6_CONCAT_IF_bsrap_bsr_ETC___d47;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg1___d35, 72u);
      backing.DEF_bsrap_bsrp_reg1___d35 = DEF_bsrap_bsrp_reg1___d35;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60, 72u);
      backing.DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60 = DEF_bsrap_bsrp_reg2_8_BIT_71_9_CONCAT_IF_bsrap_bsr_ETC___d60;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg2___d48, 72u);
      backing.DEF_bsrap_bsrp_reg2___d48 = DEF_bsrap_bsrp_reg2___d48;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73, 72u);
      backing.DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73 = DEF_bsrap_bsrp_reg3_1_BIT_71_2_CONCAT_IF_bsrap_bsr_ETC___d73;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg3___d61, 72u);
      backing.DEF_bsrap_bsrp_reg3___d61 = DEF_bsrap_bsrp_reg3___d61;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg4_BIT_71___d6, 1u);
      backing.DEF_bsrap_bsrp_reg4_BIT_71___d6 = DEF_bsrap_bsrp_reg4_BIT_71___d6;
      vcd_write_val(sim_hdl, num++, DEF_bsrap_bsrp_reg4___d5, 72u);
      backing.DEF_bsrap_bsrp_reg4___d5 = DEF_bsrap_bsrp_reg4___d5;
      vcd_write_val(sim_hdl, num++, DEF_output_cycle_00_EQ_128___d101, 1u);
      backing.DEF_output_cycle_00_EQ_128___d101 = DEF_output_cycle_00_EQ_128___d101;
      vcd_write_val(sim_hdl, num++, DEF_valFifo_first____d113, 70u);
      backing.DEF_valFifo_first____d113 = DEF_valFifo_first____d113;
      vcd_write_val(sim_hdl, num++, DEF_x__h5137, 64u);
      backing.DEF_x__h5137 = DEF_x__h5137;
      vcd_write_val(sim_hdl, num++, DEF_x__h5371, 32u);
      backing.DEF_x__h5371 = DEF_x__h5371;
      vcd_write_val(sim_hdl, num++, DEF_x__h5722, 32u);
      backing.DEF_x__h5722 = DEF_x__h5722;
    }
}

void MOD_mkTbRightArithmeticPipelined::vcd_prims(tVCDDumpType dt,
						 MOD_mkTbRightArithmeticPipelined &backing)
{
  INST_bsrap_bsrp_inFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_inFifo);
  INST_bsrap_bsrp_outFifo.dump_VCD(dt, backing.INST_bsrap_bsrp_outFifo);
  INST_bsrap_bsrp_reg0.dump_VCD(dt, backing.INST_bsrap_bsrp_reg0);
  INST_bsrap_bsrp_reg1.dump_VCD(dt, backing.INST_bsrap_bsrp_reg1);
  INST_bsrap_bsrp_reg2.dump_VCD(dt, backing.INST_bsrap_bsrp_reg2);
  INST_bsrap_bsrp_reg3.dump_VCD(dt, backing.INST_bsrap_bsrp_reg3);
  INST_bsrap_bsrp_reg4.dump_VCD(dt, backing.INST_bsrap_bsrp_reg4);
  INST_correct.dump_VCD(dt, backing.INST_correct);
  INST_input_cycle.dump_VCD(dt, backing.INST_input_cycle);
  INST_output_cycle.dump_VCD(dt, backing.INST_output_cycle);
  INST_randomShift_init.dump_VCD(dt, backing.INST_randomShift_init);
  INST_randomVal_init.dump_VCD(dt, backing.INST_randomVal_init);
  INST_valFifo.dump_VCD(dt, backing.INST_valFifo);
}
